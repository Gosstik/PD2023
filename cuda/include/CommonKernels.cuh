#pragma once

#include <iostream>
#include <cmath>
#include <cstdio>

void GPUAssert(cudaError_t code,
               const char* file,
               int line,
               bool abort = true);

#define cudaErrchk(ans) GPUAssert((ans), __FILE__, __LINE__)

////////////////////////////////////////////////////////////////////////////////

size_t Log2(size_t num);

////////////////////////////////////////////////////////////////////////////////

__global__
void ScalarMulPerBlockSimple(int num_elements, float* vector1, float* vector2, float *result);

////////////////////////////////////////////////////////////////////////////////

__global__
void SumElementsInFirstBlock(int num_elements, float* vector, float *result);

////////////////////////////////////////////////////////////////////////////////

__device__
void WarpReduce(volatile float* shared_data, int tid);

////////////////////////////////////////////////////////////////////////////////

__global__
void ScalarMulPerBlockWarpSpecific(int num_elements, float* vector1, float* vector2, float *result);

////////////////////////////////////////////////////////////////////////////////

__global__
void ScalarMulSumToOneBlock(int num_elements, float* vector1, float* vector2, float *result);

////////////////////////////////////////////////////////////////////////////////

__global__
void VectorSumSquareCoords(int num_elements, float* vector, float* result);

////////////////////////////////////////////////////////////////////////////////

float VectorSquare2Norm(int num_elements, float* vector, int block_size);

////////////////////////////////////////////////////////////////////////////////
